% initialize task instances

taskDataPrepare = construct ...
( ...
  'name', 'DataPrepare', ...
  'run', @dataPrepare, ...
  'runTimes', [1: 10], ...
  'datasetList', {datasetCIFAR10Norm1, datasetNUSWIDENorm1} ...
);

% taskHashClassification = construct ...
% ( ...
%   'name', 'HashClassification', ...
%   'run', @hashClassification, ...
%   'runTimes', [1: 10], ...
%   'datasetList', {datasetCIFAR10Norm1}, ...
%   'codeLengths', [8, 16, 24, 32, 48, 64, 96, 128], ...
%   'methodList', {methodLFHStochasticQuick2, methodKSH, methodMLH, methodSPLH, methodITQ, methodAGH, methodLSH, methodPCAH, methodSH, methodSIKH}, ...
%   'classifierList', {methodClassificationKNearestNeighbor, methodClassificationKNearestNeighborPreserveTie} ...
% );

% taskHashClassificationSub1 = construct ...
% ( ...
%   'super', taskHashClassification, ...
%   'runTimes', [1 5 9] ...
% );

% taskHashClassificationSub2 = construct ...
% ( ...
%   'super', taskHashClassification, ...
%   'runTimes', [2 6 10] ...
% );

% taskHashClassificationSub3 = construct ...
% ( ...
%   'super', taskHashClassification, ...
%   'runTimes', [3 7] ...
% );

% taskHashClassificationSub4 = construct ...
% ( ...
%   'super', taskHashClassification, ...
%   'runTimes', [4 8] ...
% );

% taskHashClassificationTest = construct ...
% ( ...
%   'super', taskHashClassification, ...
%   'name', 'HashClassification-Test', ...
%   'runTimes', [1], ...
%   'datasetList', {datasetCIFAR10Norm1Sub100}, ...
%   'codeLengths', [8], ...
%   'methodList', {methodKSH}, ...
%   'forceFresh', true ...
% );

% taskHashRegression = construct ...
% ( ...
%   'name', 'HashRegression', ...
%   'run', @hashRegression, ...
%   'runTimes', [1: 10], ...
%   'datasetList', {datasetFMLAgreeNorm1}, ...
%   'codeLengths', [8, 16, 24, 32, 48, 64, 96, 128], ...
%   'methodList', {methodLFHStochasticQuick2, methodKSH, methodSPLH, methodITQ, methodAGH, methodLSH}, ...
%   'regresserList', {methodRegressionKNearestNeighbor, methodRegressionRadiusBound} ...
% );

% taskHashRegressionSub1 = construct ...
% ( ...
%   'super', taskHashRegression, ...
%   'runTimes', [1 5 9] ...
% );

% taskHashRegressionSub2 = construct ...
% ( ...
%   'super', taskHashRegression, ...
%   'runTimes', [2 6 10] ...
% );

% taskHashRegressionSub3 = construct ...
% ( ...
%   'super', taskHashRegression, ...
%   'runTimes', [3 7] ...
% );

% taskHashRegressionSub4 = construct ...
% ( ...
%   'super', taskHashRegression, ...
%   'runTimes', [4 8] ...
% );

% taskHashRegressionTest = construct ...
% ( ...
%   'super', taskHashRegression, ...
%   'name', 'HashRegression-Test', ...
%   'runTimes', [1], ...
%   'datasetList', {datasetFMLAgreeNorm1Sub100}, ...
%   'codeLengths', [8], ...
%   'methodList', {methodKSH}, ...
%   'regresserList', {methodRegressionKNearestNeighbor}, ...
%   'forceFresh', true ...
% );

% taskFeatureRegression = construct ...
% ( ...
%   'super', taskHashRegression, ...
%   'name', 'FeatureRegression', ...
%   'run', @hashRegression, ...
%   'codeLengths', [8], ...
%   'methodList', {methodOriginFeatureHash}, ...
%   'regresserList', {methodRegressionKNearestNeighborFeature} ...
% );

% taskFeatureRegressionTest = construct ...
% ( ...
%   'super', taskFeatureRegression, ...
%   'name', 'FeatureRegression-Test', ...
%   'runTimes', [1], ...
%   'datasetList', {datasetFMLAgreeNorm1Sub100}, ...
%   'forceFresh', true ...
% );

taskHammingRanking = construct ...
( ...
  'name', 'HammingRanking', ...
  'run', @HammingRanking, ...
  'runTimes', [1: 10], ...
  'datasetList', {dataset22KLabelMeEucNorm1}, ...
  'codeLengths', [12, 24, 48, 72, 96], ...
  'codeLengths', [12, 24, 48, 72, 96], ...
  'methodList', {methodLSH, methodSH, methodPCAH, methodITQ, methodOKH}, ...
  'MAPstep', 100 ...
);

taskHammingRankingOKHSelectParam = construct ...
( ...
  'name', 'HammingRankingOKHSelectParam', ...
  'run', @HammingRankingOKHSelectParam, ...
  'runTimes', [11: 11], ...
  'datasetList', {dataset22KLabelMeEucNorm1}, ...    
  'method', methodOKH, ...
  'selectParam', {'alpha', 'C', 'codeLength'}, ...
  'MAPstep', 100, ...
  ...
  'alpha', 0.2, ...
  'C', 0.1, ...
  'codeLength', 48, ...
  ...
  'alphaSet', [0.1, 0.2, 0.3, 0.4, 0.6, 0.8], ...
  'CSet', [0.0001, 0.001, 0.01, 0.1, 1], ...
  'codeLengthSet', [12, 24, 48, 72, 96] ...  
);


% taskHammingRankingSub1 = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'runTimes', [4: 5], ...
%   'methodList', {methodMLH} ...
% );
% 
% taskHammingRankingSub2 = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'runTimes', [6: 7], ...
%   'methodList', {methodMLH} ...
% );
% 
% taskHammingRankingSub3 = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'runTimes', [8: 9], ...
%   'methodList', {methodMLH} ...
% );
% 
% taskHammingRankingSub4 = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'runTimes', [10], ...
%   'methodList', {methodMLH} ...
% );
% 
% taskHammingRankingLFHMemory = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'name', 'HammingRanking-LFH-Memory', ...
%   'runTimes', [1], ...
%   'datasetList', {datasetNUSWIDENorm1}, ...
%   'codeLengths', [128], ...
%   'methodList', {methodLFHStochasticMemory}, ...
%   'profile', true ...
% );
% 
% taskHammingRankingLFHStochasticQuick = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'name', 'HammingRanking-LFH-Stochastic-Quick', ...
%   'runTimes', [1], ...
%   'datasetList', {datasetCIFAR10Norm1}, ...
%   'codeLengths', [32], ...
%   'methodList', {methodLFHStochasticQuick2} ...
% );
% 
% taskHammingRankingTest = construct ...
% ( ...
%   'name', 'HammingRanking-Test', ...
%   'run', @HammingRanking, ...
%   'runTimes', [1], ...
%   'datasetList', {datasetUniformNorm1Sub100}, ...
%   'codeLengths', [32], ...
%   'methodList', {methodSPLH}, ...
%   'forceFresh', true ...
% );
% 
% taskHammingRankingLFHSelectParam = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'name', 'HammingRanking-LFH-SelectParam', ...
%   'methodList', {methodLFHSelectParam, methodLFHSelectParamCross} ...
% );
% 
% taskHammingRankingSmallLabel = construct ...
% ( ...
%   'super', taskHammingRanking, ...
%   'name', 'HammingRanking-SmallLabel', ...
%   'runTimes', [1: 10], ...
%   'datasetList', {datasetCIFAR10Norm1Sub5K}, ...
%   'codeLengths', [32, 48, 64, 96], ...
%   'methodList', {methodLFH, methodLFHStochasticQuick2, methodKSHFull, methodSPLHFull, methodMLHFull} ...
% );
% 
% taskHammingRankingNormTest = construct ...
% ( ...
%   'name', 'HammingRanking-NormTest', ...
%   'run', @HammingRanking, ...
%   'codeLengths', [32], ...
%   'datasetList', {datasetCIFAR10Norm1, datasetCIFAR10Norm2, datasetNUSWIDENorm1, datasetNUSWIDENorm2}, ...
%   'methodList', {methodLSH, methodSIKH, methodSH, methodPCAH, methodITQ, methodAGH, methodKSH, methodMLH, methodLFHStochastic, methodLFHStochasticKernel} ...
% );
% 
% taskEuclideanRanking = construct ...
% ( ...
%   'name', 'EuclideanRanking', ...
%   'run', @EuclideanRanking, ...
%   'codeLengths', [32], ...
%   'datasetList', {datasetCIFAR100Norm1, datasetCIFAR100Norm2, datasetImageNetBOWNorm1, datasetImageNetBOWNorm2}, ...
%   'methodList', {methodOriginF, methodPCAF}, ...
%   'classifyNumGuess', 5 ...
% );
% 
% taskLFHConvergence = construct ...
% ( ...
%   'name', 'LFH-Convergence', ...
%   'run', @HammingRanking, ...
%   'codeLengths', [32], ...
%   'datasetList', {datasetCIFAR10Norm1Sub5K}, ...
%   'methodList', {methodLFH, methodLFHStochasticQuickFull} ...
% );

varNames = who('task*');
for varName = varNames'
  varName = varName{1};
  v = getVar(varName);
  v = inheritField(v);
  if ~isfield(v, 'forceFresh')
    v.forceFresh = false;
  end
  if ~isfield(v, 'runTimes')
    v.runTimes = [1];
  end
  if ~isfield(v, 'profile')
    v.profile = false;
  end
  setVar(varName, v);
end
clear v varName varNames;
