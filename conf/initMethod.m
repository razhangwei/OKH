% initialize method instances

methodLSH = construct ...
( ...
  'name', 'LSH', ...
  'path', 'hash/LSH', ...
  'hash', @LSH ...
);

methodSIKH = construct ...
( ...
  'name', 'SIKH', ...
  'path', 'hash/SIKH', ...
  'hash', @SIKH ...
);

methodSH = construct ...
( ...
  'name', 'SH', ...
  'path', 'hash/SH', ...
  'hash', @SH ...
);

methodPCAH = construct ...
( ...
  'name', 'PCAH', ...
  'path', 'hash/PCAH', ...
  'hash', @PCAH ...
);

methodITQ = construct ...
( ...
  'name', 'ITQ', ...
  'path', 'hash/ITQ', ...
  'hash', @ITQ, ...
  'numIter', 50 ...
);

methodAGH = construct ...
( ...
  'name', 'AGH', ...
  'path', 'hash/AGH', ...
  'hash', @AGH, ...
  'numIterKMeans', 5, ...
  'numAnchor', 300, ...
  'numNearAnchor', 2 ...
);

methodKSH = construct ...
( ...
  'name', 'KSH', ...
  'path', 'hash/KSH', ...
  'hash', @KSH, ...
  'numKernel', 300, ...
  'numSample', 2000 ...
);

methodKSHFull = construct ...
( ...
  'super', methodKSH, ...
  'name', 'KSH-Full', ...
  'numSample', 10000000 ...
);

methodMLH = construct ...
( ...
  'name', 'MLH', ...
  'path', 'hash/MLH', ...
  'hash', @MLH, ...
  'numSample', 2000, ...
  'valIteration', 100, ...
  'trainIteration', 2000, ...
  'epochSize', 1e5 ...
);

methodMLHFull = construct ...
( ...
  'super', methodMLH, ...
  'name', 'MLH-Full', ...
  'numSample', 10000000 ...
);

methodSPLH = construct ...
( ...
  'name', 'SPLH', ...
  'path', 'hash/SPLH', ...
  'hash', @SPLH, ...
  'eta', 0.2, ...
  'numSample', 2000 ...
);

methodSPLHFull = construct ...
( ...
  'super', methodSPLH, ...
  'name', 'SPLH-Full', ...
  'numSample', 10000000 ...
);


methodOKH = construct ...
( ...
  'name', 'OKH', ...
  'path', 'hash/OKH', ...
  'hash', @OKH, ...
  'alpha', 0.2, ...
  'C',  0.1, ...
  'kernelNum', 300, ...
  'MAPThres', 0 ...
);


methodLFH = construct ...
( ...
  'name', 'LFH', ...
  'path', 'hash/LFH', ...
  'hash', @LFH, ...
  'maxIter', 100, ...
  'convergeThresh', 1e-3, ...
  'beta', 3e1, ...
  'lambda', 1e0 ...
);

methodLFHStochastic = construct ...
( ...
  'super', methodLFH, ...
  'name', 'LFH-Stochastic', ...
  'learnImpl', 'stochastic' ...
);

methodLFHStochasticQuick = construct ...
( ...
  'super', methodLFH, ...
  'name', 'LFH-Stochastic-Quick', ...
  'learnImpl', 'stochastic-quick', ...
  'convergeThresh', 1e-2, ...
  'windowSize', 5 ...
);

methodLFHStochasticQuick2 = construct ...
( ...
  'super', methodLFHStochasticQuick, ...
  'name', 'LFH-Stochastic-Quick-2', ...
  'learnImpl', 'stochastic-quick-2', ...
  'maxIter', 50 ...
);

methodLFHStochasticMemory = construct ...
( ...
  'super', methodLFHStochasticQuick, ...
  'name', 'LFH-Stochastic-Memory', ...
  'maxIter', 1 ...
);

methodLFHStochasticFull = construct ...
( ...
  'super', methodLFHStochastic, ...
  'name', 'LFH-Stochastic-Full', ...
  'learnImpl', 'stochastic-full', ...
  'convergeThresh', 0 ...
);

methodLFHStochasticQuickFull = construct ...
( ...
  'super', methodLFHStochasticQuick2, ...
  'name', 'LFH-Stochastic-Quick-Full-2', ...
  'learnImpl', 'stochastic-quick-full', ...
  'convergeThresh', 0, ...
  'maxIter', 100 ...
);

methodLFHStochasticClean = construct ...
( ...
  'super', methodLFH, ...
  'name', 'LFH-Stochastic-Clean', ...
  'learnImpl', 'stochastic-clean', ...
  'debug', false ...
);

methodLFHKernel = construct ...
( ...
  'super', methodLFH, ...
  'name', 'LFH-Kernel', ...
  'kernelNum', 300, ...
  'kernelEqualVariance', true ...
);

methodLFHStochasticKernel = construct ...
( ...
  'super', {methodLFHStochastic, methodLFHKernel}, ...
  'name', 'LFH-Stochastic-Kernel' ...
);

methodLFHStochasticKernelQuick = construct ...
( ...
  'super', {methodLFHStochasticQuick, methodLFHKernel}, ...
  'name', 'LFH-Stochastic-Kernel-Quick' ...
);

methodLFHSelectParam = construct ...
( ...
  'super', methodLFH, ...
  'name', 'LFH-selectParam', ...
  'selectParam', true, ...
  'selectParamMethod', 'linear', ...
  'betaSet', [1e0, 3e0, 1e1, 3e1, 1e2, 3e2, 1e3], ...
  'lambdaSet', [1e-1, 3e-1, 1e0, 3e0, 1e1] ...
);

methodLFHSelectParamQuick = construct ...
( ...
  'super', methodLFHSelectParam, ...
  'name', 'LFH-selectParam-quick', ...
  'betaSet', [1e1, 1e2], ...
  'lambdaSet', [1e-1, 1e0] ...
);

methodLFHSelectParamCross = construct ...
( ...
  'super', methodLFHSelectParam, ...
  'name', 'LFH-selectParamCross', ...
  'selectParamMethod', 'cross' ...
);

methodLFHSelectParamCrossQuick = construct ...
( ...
  'super', methodLFHSelectParamQuick, ...
  'name', 'LFH-selectParamCross-quick', ...
  'selectParamMethod', 'cross' ...
);

methodOriginFeatureHash = construct ...
( ...
  'name', 'OriginFeatureHash', ...
  'path', 'feature/OriginF', ...
  'hash', @OriginF ...
);

methodOriginF = construct ...
( ...
  'name', 'OriginF', ...
  'path', 'feature/OriginF', ...
  'feature', @OriginF ...
);

methodPCAF = construct ...
( ...
  'name', 'PCAF', ...
  'path', 'feature/PCAF', ...
  'feature', @PCAF, ...
  'PCADim', 40 ...
);

methodRegressionSoftWeightBase = construct ...
( ...
  'softWeight', true, ...
  'soft', 1, ...
  'alpha', 1 ...
);

methodRegressionFeatureBase = construct ...
( ...
  'binaryCode', false ...
);

methodRegressionRadiusBound = construct ...
( ...
  'name', 'RadiusBound', ...
  'path', 'regression', ...
  'regression', @radiusBound, ...
  'radius', 2 ...
);

methodRegressionRadiusBoundSoftWeight = construct ...
( ...
  'super', {methodRegressionRadiusBound, methodRegressionSoftWeightBase}, ...
  'name', 'RadiusBound-SoftWeight' ...
);

methodRegressionFullRadius = construct ...
( ...
  'super', methodRegressionRadiusBound, ...
  'name', 'FullRadius', ...
  'radius', 1024 ...
);

methodRegressionFullRadiusSoftWeight = construct ...
( ...
  'super', {methodRegressionFullRadius, methodRegressionSoftWeightBase}, ...
  'name', 'FullRadius-SoftWeight' ...
);

methodRegressionKNearestNeighbor = construct ...
( ...
  'name', 'KNearestNeighbor', ...
  'path', 'regression', ...
  'regression', @kNearestNeighbor, ...
  'numNeighbor', 5, ...
  'preserveTie', true ...
);

methodRegressionKNearestNeighborFeature = construct ...
( ...
  'super', {methodRegressionKNearestNeighbor, methodRegressionFeatureBase}, ...
  'name', 'KNearestNeighbor-Feature' ...
);

methodRegressionKNearestNeighborSoftWeight = construct ...
( ...
  'super', {methodRegressionKNearestNeighbor, methodRegressionSoftWeightBase}, ...
  'name', 'KNearestNeighbor-SoftWeight' ...
);

methodRegressionLinear = construct ...
( ...
  'name', 'Linear', ...
  'path', 'regression', ...
  'regression', @linearRegression ...
);

methodClassificationRadiusMajority = construct ...
( ...
  'name', 'RadiusMajority', ...
  'path', 'classification', ...
  'classify', @radiusMajority, ...
  'radius', 2 ...
);

methodClassificationKNearestNeighbor = construct ...
( ...
  'name', 'KNearestNeighbor-2', ...
  'path', 'classification', ...
  'classify', @kNearestNeighbor, ...
  'numNeighbor', 3, ...
  'preserveTie', false ...
);

methodClassificationKNearestNeighborPreserveTie = construct ...
( ...
  'super', methodClassificationKNearestNeighbor, ...
  'name', 'KNearestNeighbor-PreserveTie-2', ...
  'preserveTie', true ...
);

varNames = who('method*');
for varName = varNames'
  varName = varName{1};
  v = getVar(varName);
  v = inheritField(v);
  if isfield(v, 'path')
    v.path = genpath(v.path);
  end
  setVar(varName, v);
end
clear v varName varNames;
