% perform hash classification using hashing codes generated by different methods
function hashClassification (task)

  for dataset = task.datasetList
    dataset = dataset{1};

    try
      fprintf('Performing evaluation task %s on %s\n', task.name, dataset.name);
      dataset = loadDataset(task, dataset);

      for cidx = 1: length(task.codeLengths)
        codeLength = task.codeLengths(cidx);
        nMethod = length(task.methodList);

        for midx = 1: nMethod
          method = task.methodList{midx};

          try

            % compute binary codes
            fprintf('Computing binary codes on dataset %s using %s (%d bits)\n', dataset.name, method.name, codeLength);
            cacheFile = sprintf('%s/code_%s_%s_%d.mat', task.cacheDir, dataset.name, method.name, codeLength);
            if loadCache(cacheFile, task.forceFresh, getConst('CACHE_VER_CODE'))
              addpath(method.path);
              [B1, B2, timeTrain, timeTest] = method.hash(task, dataset, method, codeLength);
              rmpath(method.path);
              save(cacheFile, 'version', 'B1', 'B2', 'timeTrain', 'timeTest', '-v7.3');
            end
            fprintf('  Time cost: %.4gs (training), %.4g (testing)\n', timeTrain, timeTest);

            % perform hash classification using Hamming distance
            for ridx = 1: length(task.classifierList)
              classifier = task.classifierList{ridx};
              fprintf('Perform hash classification on dataset %s using %s and %s (%d bits)\n', dataset.name, method.name, classifier.name, codeLength);
              cacheFile = sprintf('%s/hashClassification_%s_%s_%s_%d.mat', task.cacheDir, dataset.name, method.name, classifier.name, codeLength);
              if loadCache(cacheFile, task.forceFresh, getConst('CACHE_VER_HASH_CLASSIFICATION'))
                addpath(classifier.path);
                tp = timerStart();
                L1 = dataset.label(dataset.indexTrain);
                L2 = dataset.label(dataset.indexTest);
                [predict, succ] = classifier.classify(classifier, B1, B2, L1);
                succRate = sum(succ) / length(L2);
                correctRate = sum(predict(succ) == L2(succ)) / sum(succ);
                timeCost = timerStop(tp);
                rmpath(classifier.path);
                save(cacheFile, 'version', 'predict', 'succ', 'succRate', 'correctRate', 'timeCost', '-v7.3');
              end
              fprintf('  Correct rate: %.4g\n', correctRate);
              fprintf('  Success rate: %.4g\n', succRate);
              fprintf('  Time cost: %.4gs (elapsed), %.4gs (CPU)\n', timeCost.etime, timeCost.ctime);
            end

          catch err
            reportError(err, sprintf('Error when performing evaluation task %s on dataset %s using %s (%d bits)\n', task.name, dataset.name, method.name, codeLength));
          end

        end

      end

      fprintf('\n\n');

    catch err
      reportError(err, sprintf('Error when performing evaluation task %s on %s\n', task.name, dataset.name));
    end

  end

end
